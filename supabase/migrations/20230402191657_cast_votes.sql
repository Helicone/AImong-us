-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE OR REPLACE FUNCTION public.cast_vote(
	p_player_id uuid,
	p_answer_id bigint)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    question_id bigint;
    game_id uuid;
    user_in_game boolean;
BEGIN
    -- Get the question_id and game_id associated with the provided answer_id
    SELECT q.id, q.game INTO question_id, game_id
    FROM public.questions AS q
    JOIN public.answers AS a ON q.id = a.question
    WHERE a.id = p_answer_id;

    IF question_id IS NULL OR game_id IS NULL THEN
        RAISE EXCEPTION 'Invalid answer_id provided.'
        USING HINT = 'Ensure the provided answer_id is valid.';
    END IF;

    -- Check if the player is in the game
    SELECT EXISTS (
        SELECT 1
        FROM public.player_games
        WHERE game = game_id AND player = p_player_id
    ) INTO user_in_game;

    IF NOT user_in_game THEN
        RAISE EXCEPTION 'User is not in the game for the given question.'
        USING HINT = 'Ensure the user is in the game before casting a vote.';
    END IF;

    -- Insert the vote
    INSERT INTO public.votes (player, answer)
    VALUES (p_player_id, p_answer_id)
    ON CONFLICT (player, answer) DO NOTHING;
END;
$BODY$;

ALTER FUNCTION public.cast_vote(uuid, bigint)
    OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.cast_vote(uuid, bigint) TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.cast_vote(uuid, bigint) TO anon;

GRANT EXECUTE ON FUNCTION public.cast_vote(uuid, bigint) TO authenticated;

GRANT EXECUTE ON FUNCTION public.cast_vote(uuid, bigint) TO postgres;

GRANT EXECUTE ON FUNCTION public.cast_vote(uuid, bigint) TO service_role;

