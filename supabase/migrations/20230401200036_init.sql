-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.games
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    created_at timestamp with time zone DEFAULT now(),
    status text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT current_games_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.games
    OWNER to postgres;

ALTER TABLE IF EXISTS public.games
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.games TO anon;

GRANT ALL ON TABLE public.games TO authenticated;

GRANT ALL ON TABLE public.games TO postgres;

GRANT ALL ON TABLE public.games TO service_role;


CREATE TABLE IF NOT EXISTS public.questions
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    question text COLLATE pg_catalog."default" NOT NULL,
    game uuid NOT NULL,
    CONSTRAINT questions_pkey PRIMARY KEY (id),
    CONSTRAINT questions_game_fkey FOREIGN KEY (game)
        REFERENCES public.games (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.questions
    OWNER to postgres;

ALTER TABLE IF EXISTS public.questions
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.questions TO anon;

GRANT ALL ON TABLE public.questions TO authenticated;

GRANT ALL ON TABLE public.questions TO postgres;

GRANT ALL ON TABLE public.questions TO service_role;

CREATE TABLE IF NOT EXISTS public.answers
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    question bigint NOT NULL,
    answer text COLLATE pg_catalog."default" NOT NULL,
    player uuid NOT NULL,
    CONSTRAINT answers_pkey PRIMARY KEY (id),
    CONSTRAINT answers_player_fkey FOREIGN KEY (player)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT answers_question_fkey FOREIGN KEY (question)
        REFERENCES public.questions (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.answers
    OWNER to postgres;

ALTER TABLE IF EXISTS public.answers
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.answers TO anon;

GRANT ALL ON TABLE public.answers TO authenticated;

GRANT ALL ON TABLE public.answers TO postgres;

GRANT ALL ON TABLE public.answers TO service_role;


CREATE TABLE IF NOT EXISTS public.player_games
(
    game uuid NOT NULL,
    player uuid,
    is_voted_out boolean NOT NULL DEFAULT false,
    CONSTRAINT player_games_game_fkey FOREIGN KEY (game)
        REFERENCES public.games (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT player_games_player_fkey FOREIGN KEY (player)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT player_games_unique UNIQUE (game, player) -- Add this line
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.player_games
    OWNER to postgres;

ALTER TABLE IF EXISTS public.player_games
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.player_games TO anon;

GRANT ALL ON TABLE public.player_games TO authenticated;

GRANT ALL ON TABLE public.player_games TO postgres;

GRANT ALL ON TABLE public.player_games TO service_role;
